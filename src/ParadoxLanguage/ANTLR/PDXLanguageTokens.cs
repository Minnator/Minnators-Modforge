//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/EU4 Grammar/PDXLanguageTokens.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PDXLanguageTokens : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WHITESPACE=1, SINGLE_LINE_COMMENT=2, EQ=3, LPAR=4, RPAR=5, AND=6, OR=7, 
		YES=8, NO=9, NOT=10, INT=11, MPOWER=12, TAG=13, STRING=14, FLOAT=15, DATE=16, 
		MONTHS=17, DAYS=18, COLOR=19, PLUS=20, MINUS=21, COMMA=22, DOT=23, IF=24, 
		ELSE=25, ELSE_IF=26, LIMIT=27, WHILE=28, IDENTIFIER=29, STRING_TOOLTIP=30;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "SINGLE_LINE_COMMENT", "EQ", "LPAR", "RPAR", "AND", "OR", 
		"YES", "NO", "NOT", "INT", "MPOWER", "TAG", "STRING", "FLOAT", "DATE", 
		"MONTHS", "DAYS", "COLOR", "PLUS", "MINUS", "COMMA", "DOT", "IF", "ELSE", 
		"ELSE_IF", "LIMIT", "WHILE", "IDENTIFIER", "STRING_TOOLTIP"
	};


	public PDXLanguageTokens(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PDXLanguageTokens(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'='", "'{'", "'}'", "'AND'", "'OR'", null, null, null, 
		null, null, null, null, null, null, "'months'", "'days'", "'color'", "'+'", 
		"'-'", "','", "'.'", "'if'", "'else'", "'else_if'", "'limit'", "'while'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WHITESPACE", "SINGLE_LINE_COMMENT", "EQ", "LPAR", "RPAR", "AND", 
		"OR", "YES", "NO", "NOT", "INT", "MPOWER", "TAG", "STRING", "FLOAT", "DATE", 
		"MONTHS", "DAYS", "COLOR", "PLUS", "MINUS", "COMMA", "DOT", "IF", "ELSE", 
		"ELSE_IF", "LIMIT", "WHILE", "IDENTIFIER", "STRING_TOOLTIP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PDXLanguageTokens.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PDXLanguageTokens() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,30,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,1,0,4,0,63,8,0,11,0,12,0,64,1,0,1,0,1,1,1,1,5,1,71,8,1,
		10,1,12,1,74,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
		6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,97,8,7,1,8,1,8,1,8,1,8,3,8,103,8,8,1,
		9,1,9,1,9,1,9,1,9,1,9,3,9,111,8,9,1,10,3,10,114,8,10,1,10,4,10,117,8,10,
		11,10,12,10,118,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,139,8,11,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,155,8,13,5,13,157,
		8,13,10,13,12,13,160,9,13,1,13,1,13,1,14,3,14,165,8,14,1,14,4,14,168,8,
		14,11,14,12,14,169,1,14,1,14,4,14,174,8,14,11,14,12,14,175,1,15,4,15,179,
		8,15,11,15,12,15,180,1,15,1,15,4,15,185,8,15,11,15,12,15,186,1,15,1,15,
		4,15,191,8,15,11,15,12,15,192,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
		1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
		1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
		1,27,1,27,1,27,1,27,1,28,4,28,250,8,28,11,28,12,28,251,1,28,1,28,4,28,
		256,8,28,11,28,12,28,257,1,28,4,28,261,8,28,11,28,12,28,262,3,28,265,8,
		28,1,29,4,29,268,8,29,11,29,12,29,269,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
		19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,
		0,10,3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,43,43,45,45,1,0,48,57,1,
		0,65,90,2,0,48,57,65,90,1,0,34,34,1,0,49,57,4,0,48,57,65,90,95,95,97,122,
		5,0,36,36,48,57,65,90,95,95,97,122,299,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
		0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,62,
		1,0,0,0,3,68,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,0,
		0,0,13,87,1,0,0,0,15,96,1,0,0,0,17,102,1,0,0,0,19,110,1,0,0,0,21,113,1,
		0,0,0,23,138,1,0,0,0,25,140,1,0,0,0,27,144,1,0,0,0,29,164,1,0,0,0,31,178,
		1,0,0,0,33,194,1,0,0,0,35,201,1,0,0,0,37,206,1,0,0,0,39,212,1,0,0,0,41,
		214,1,0,0,0,43,216,1,0,0,0,45,218,1,0,0,0,47,220,1,0,0,0,49,223,1,0,0,
		0,51,228,1,0,0,0,53,236,1,0,0,0,55,242,1,0,0,0,57,264,1,0,0,0,59,267,1,
		0,0,0,61,63,7,0,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,
		0,0,0,65,66,1,0,0,0,66,67,6,0,0,0,67,2,1,0,0,0,68,72,5,35,0,0,69,71,8,
		1,0,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,
		0,0,0,74,72,1,0,0,0,75,76,6,1,0,0,76,4,1,0,0,0,77,78,5,61,0,0,78,6,1,0,
		0,0,79,80,5,123,0,0,80,8,1,0,0,0,81,82,5,125,0,0,82,10,1,0,0,0,83,84,5,
		65,0,0,84,85,5,78,0,0,85,86,5,68,0,0,86,12,1,0,0,0,87,88,5,79,0,0,88,89,
		5,82,0,0,89,14,1,0,0,0,90,91,5,121,0,0,91,92,5,101,0,0,92,97,5,115,0,0,
		93,94,5,89,0,0,94,95,5,69,0,0,95,97,5,83,0,0,96,90,1,0,0,0,96,93,1,0,0,
		0,97,16,1,0,0,0,98,99,5,110,0,0,99,103,5,111,0,0,100,101,5,78,0,0,101,
		103,5,79,0,0,102,98,1,0,0,0,102,100,1,0,0,0,103,18,1,0,0,0,104,105,5,78,
		0,0,105,106,5,79,0,0,106,111,5,84,0,0,107,108,5,110,0,0,108,109,5,111,
		0,0,109,111,5,116,0,0,110,104,1,0,0,0,110,107,1,0,0,0,111,20,1,0,0,0,112,
		114,7,2,0,0,113,112,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,117,7,
		3,0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,
		119,22,1,0,0,0,120,121,5,65,0,0,121,122,5,68,0,0,122,139,5,77,0,0,123,
		124,5,77,0,0,124,125,5,73,0,0,125,139,5,76,0,0,126,127,5,68,0,0,127,128,
		5,73,0,0,128,139,5,80,0,0,129,130,5,97,0,0,130,131,5,100,0,0,131,139,5,
		109,0,0,132,133,5,100,0,0,133,134,5,105,0,0,134,139,5,112,0,0,135,136,
		5,109,0,0,136,137,5,105,0,0,137,139,5,108,0,0,138,120,1,0,0,0,138,123,
		1,0,0,0,138,126,1,0,0,0,138,129,1,0,0,0,138,132,1,0,0,0,138,135,1,0,0,
		0,139,24,1,0,0,0,140,141,7,4,0,0,141,142,7,5,0,0,142,143,7,5,0,0,143,26,
		1,0,0,0,144,158,5,34,0,0,145,157,8,6,0,0,146,155,5,32,0,0,147,148,5,92,
		0,0,148,155,5,110,0,0,149,150,5,92,0,0,150,155,5,116,0,0,151,152,5,92,
		0,0,152,155,5,34,0,0,153,155,5,92,0,0,154,146,1,0,0,0,154,147,1,0,0,0,
		154,149,1,0,0,0,154,151,1,0,0,0,154,153,1,0,0,0,155,157,1,0,0,0,156,145,
		1,0,0,0,156,154,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,
		0,159,161,1,0,0,0,160,158,1,0,0,0,161,162,5,34,0,0,162,28,1,0,0,0,163,
		165,7,2,0,0,164,163,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,168,7,
		3,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,
		170,171,1,0,0,0,171,173,5,46,0,0,172,174,7,3,0,0,173,172,1,0,0,0,174,175,
		1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,30,1,0,0,0,177,179,7,7,0,0,
		178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,182,
		1,0,0,0,182,184,5,46,0,0,183,185,7,3,0,0,184,183,1,0,0,0,185,186,1,0,0,
		0,186,184,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,190,5,46,0,0,189,
		191,7,3,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,
		0,0,0,193,32,1,0,0,0,194,195,5,109,0,0,195,196,5,111,0,0,196,197,5,110,
		0,0,197,198,5,116,0,0,198,199,5,104,0,0,199,200,5,115,0,0,200,34,1,0,0,
		0,201,202,5,100,0,0,202,203,5,97,0,0,203,204,5,121,0,0,204,205,5,115,0,
		0,205,36,1,0,0,0,206,207,5,99,0,0,207,208,5,111,0,0,208,209,5,108,0,0,
		209,210,5,111,0,0,210,211,5,114,0,0,211,38,1,0,0,0,212,213,5,43,0,0,213,
		40,1,0,0,0,214,215,5,45,0,0,215,42,1,0,0,0,216,217,5,44,0,0,217,44,1,0,
		0,0,218,219,5,46,0,0,219,46,1,0,0,0,220,221,5,105,0,0,221,222,5,102,0,
		0,222,48,1,0,0,0,223,224,5,101,0,0,224,225,5,108,0,0,225,226,5,115,0,0,
		226,227,5,101,0,0,227,50,1,0,0,0,228,229,5,101,0,0,229,230,5,108,0,0,230,
		231,5,115,0,0,231,232,5,101,0,0,232,233,5,95,0,0,233,234,5,105,0,0,234,
		235,5,102,0,0,235,52,1,0,0,0,236,237,5,108,0,0,237,238,5,105,0,0,238,239,
		5,109,0,0,239,240,5,105,0,0,240,241,5,116,0,0,241,54,1,0,0,0,242,243,5,
		119,0,0,243,244,5,104,0,0,244,245,5,105,0,0,245,246,5,108,0,0,246,247,
		5,101,0,0,247,56,1,0,0,0,248,250,7,8,0,0,249,248,1,0,0,0,250,251,1,0,0,
		0,251,249,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,255,5,45,0,0,254,
		256,7,8,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,1,
		0,0,0,258,265,1,0,0,0,259,261,7,8,0,0,260,259,1,0,0,0,261,262,1,0,0,0,
		262,260,1,0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,249,1,0,0,0,264,260,
		1,0,0,0,265,58,1,0,0,0,266,268,7,9,0,0,267,266,1,0,0,0,268,269,1,0,0,0,
		269,267,1,0,0,0,269,270,1,0,0,0,270,60,1,0,0,0,23,0,64,72,96,102,110,113,
		118,138,154,156,158,164,169,175,180,186,192,251,257,262,264,269,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
